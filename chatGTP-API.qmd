
---
title: "chatGTP API + R"
subtitle: "Some example usgaes of chatGTP API"
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/logo.png
    css: styles.css
    footer: "Rasool - CMB meeting - June 13th 2024"
resources:
    - demo.pdf
---

## 
    
::: {.callout-tip title="API"}

An **Application Programming Interface (API)** is a way for two or more computer programs or components to communicate with each other.

:::

::: footer
Learn more: [wikipedia](https://en.wikipedia.org/wiki/API)
:::
  
## Examples

A few examples from easy to more tricky:

-   Ex1: Batch / structured prompting
-   Ex2: Analyzing a directory
-   Ex3: GPT Models dialogue
-   Ex4: Complete think => debug => and test circle (mainly an idea for now)

## Connecting to openAI API

<ul style="font-size: 0.5em; font-family: Arial, sans-serif; color: #333;">
  <li><strong>Prompt:</strong> paste("What is the cellular compartment of genes in", **DE_genes$ID**, "?")
  <li><strong>Model:</strong> gpt-3.5-turbo</li>
  <li><strong>Temperature:</strong> 0-1</li>
  <li><strong>API Key:</strong> Johan Viklund provides it for Mimir accounts :)</li>
</ul>
<div style="font-size: 0.8em;"> <!-- Adjust the font size here -->

``` {.r code-line-numbers="1|3|4|8-9"}
chatGPT <- function(prompt, modelName = "gpt-3.5-turbo", temperature = 1, apiKey) {
  response <- POST(
    url = "https://api.openai.com/v1/chat/completions",
    add_headers(Authorization = paste("Bearer", apiKey)),
    content_type_json(),
    encode = "json",
    body = list(
      model = modelName,
      temperature = temperature,
      messages = list(list(role = "user", content = prompt))
    )
  )
  stop_for_status(response) 
  trimws(content(response)$choices[[1]]$message$content)
}
```

## Batch / structured prompting

<ul style="font-size: 0.5em; font-family: Arial, sans-serif; color: #333;">
  <li> Finding the meaning and related information for a new word.
  <li> Getting a word or phrase as input.
  <li> First finding the part of speech for the word: verb, noun, adjective, etc.
  <li> Then creating a structured prompt to get relevant information.
  <li> And finally doing some data wrangling to get the information.
</ul>

## Ex1: Batch / structured prompting
![](images/tables.png)
<ul style="font-size: 0.3em; font-family: Arial, sans-serif; color: #333;">
**Verb**:
Meaning in English |
Meaning in Farsi |
Part of Speech |
Infinitiv |
Presens |
Preteritum |
Supinum |
Presens example sentence |
Preteritum example sentence |
Supinum example sentence |
</ul>

<div style="font-size: 0.8em;"> 
  
```{.r}
createPrompt <- function(input, pos, consolidatedtxt) {
  path_template <- sprintf("temp_tables/%s.txt", tolower(pos))
  
  if (file.exists(path_template)) {
    lines <- readLines(path_template)
    table_string <- paste(
      lines[which(grepl("Category \\| Details", lines)) : which(lines == "End |")],
      collapse = "\n"
    )
    paste(verb, sprintf("is a Swedish %s. Please fill in the blanks:", tolower(pos)),
          table_string, "For example sentences in the table, please provide
          sentences with at least 15 words in each sentence, and put the meaning
          in English at the end of the sentence.", sep = "\n")
  } else { 
    paste("No template found for", pos)
  }
}
```

## Ex2: Analyzing a directory

<ul style="font-size: 0.5em; font-family: Arial, sans-serif; color: #333;">
  <li> GPT4o model can read files.
  <li> But how about giving a directory path and reading the files that we want?
  <li> Then asking questions considering information in the files.
</ul>







