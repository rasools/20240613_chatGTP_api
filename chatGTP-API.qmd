
---
title: "chatGTP API + R"
subtitle: "Some example usgaes of chatGTP API"
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/logo.png
    css: styles.css
    footer: "Rasool - CMB meeting - June 27th 2024"
# runtime: shiny
---

## 

::: {.callout-tip title="API"}

An **Application Programming Interface (API)** is a way for two or more computer programs or components to communicate with each other.

:::

::: footer
Learn more: [wikipedia](https://en.wikipedia.org/wiki/API)
:::

## Disclaimer

-   52 Percent of ChatGPT Answers to Programming Questions Are Wrong
https://dl.acm.org/doi/pdf/10.1145/3613904.3642596
-   https://chalmers-my.sharepoint.com/:p:/r/personal/haowa_chalmers_se/_layouts/15/Doc2.aspx?action=edit&sourcedoc=%7B0a87ac61-104d-467b-b6c7-b9a04ddf97dd%7D&wdOrigin=TEAMS-MAGLEV.teamsSdk_ns.rwc&wdExp=TEAMS-TREATMENT&wdhostclicktime=1718356155811&web=1

-   We shouldn't consider chatGTP as a black box. What we can adjust?
    -   Model
    -   Model parameters (temperature, max_tokens, top_p etc.)
    -   Prompt:
        -   Context
        -   Instructions (text summarization, reasoning, question answering, role playing, code generation, etc.)
        -   Input data
        -   Questions


## Examples

A few examples from easy to more tricky:

-   Ex1: Batch prompting
-   Ex2: Structured prompting
-   Ex3: A directory as a prompt
-   Ex4: chatGTP Self prompting
-   Idea: Complete **Think** => **Debug** => **Test** circle 
(mainly an idea for now)

## Connecting to openAI API

-   Prompt: `paste("What is the cellular compartment of genes in", DE_genes$ID, "?")`
-   Model: gpt-3.5-turbo
-   Temperature: 0-1
-   API Key: Johan Viklund provides it for Mimir accounts :)

``` {.r code-line-numbers="1|3|4|8-9"}
chatGPT <- function(prompt, modelName = "gpt-3.5-turbo", temperature = 1, apiKey) {
  response <- POST(
    url = "https://api.openai.com/v1/chat/completions",
    add_headers(Authorization = paste("Bearer", apiKey)),
    content_type_json(),
    encode = "json",
    body = list(
      model = modelName,
      temperature = temperature,
      messages = list(list(role = "user", content = prompt))
    )
  )
  stop_for_status(response) 
  trimws(content(response)$choices[[1]]$message$content)
}
```

## Ex1: Batch prompting

-   Starting with a list of genes
-   Asking chatGPT to find `reported cell-lines with a knockout for each of the genes`
-   Doing some data wrangling to get the information

## Ex2: Structured prompting

::: incremental
-   We want to make a personal dictionary. 
-   Finding the meaning and related information for a new word.
-   Getting a word or phrase as input.
-   First finding the `part of speech` for the word: `verb`, `noun`, `adjective`, etc.
-   Then creating a structured prompt to get relevant information.
-   And finally data formatting.
:::

. . .


## Ex2: Structured prompting
![](images/tables.png)

**Verb**:
Meaning in English |
Meaning in Farsi |
Part of Speech |
Infinitiv |
Presens |
Preteritum |
Supinum |
Presens example sentence |
Preteritum example sentence |
Supinum example sentence |


```{.r}
createPrompt <- function(input, pos, consolidatedtxt) {
  path_template <- sprintf("temp_tables/%s.txt", tolower(pos))
  
  if (file.exists(path_template)) {
    lines <- readLines(path_template)
    table_string <- paste(
      lines[which(grepl("Category \\| Details", lines)) : which(lines == "End |")],
      collapse = "\n"
    )
    paste(verb, sprintf("is a Swedish %s. Please fill in the blanks:", tolower(pos)),
          table_string, "For example sentences in the table, please provide
          sentences with at least 15 words in each sentence, and put the meaning
          in English at the end of the sentence.", sep = "\n")
  } else { 
    paste("No template found for", pos)
  }
}
```

## Ex3: Analyzing a directory

-   GPT4o model can read files.
-   But how about giving a directory path and reading the files that we want?
-   Then asking questions considering information in the files.

## Ex4: GPT chats dialogue

-   GPT4o model can read files.
-   We saw that we can get help to analyze the files in a directory as well.
-   How about loading two chat instances and let them chat with each other?
-   We can provide different context for each of the chats.
-   Also we can set different settings for the chats. For instance different temperature.

## Idea: How can we trick chatGTP to complete `Think => Debug => Test` circle?




