---
title: "chatGTP API Example 3: Directory analysis"
format: html
editor: visual
---

```{r}
library(httr)
library(jsonlite)
```

```{r}


# Function to list the folder structure and optionally read file contents
get_folder_structure <- function(dir_path, read_files = FALSE) {
  folder_structure <- list()
  files_and_dirs <- list.files(dir_path, full.names = TRUE)
  
  for (entry in files_and_dirs) {
    entry_name <- basename(entry)
    if (file.info(entry)$isdir) {
      folder_structure[[entry_name]] <- get_folder_structure(entry, read_files)
    } else {
      if (read_files) {
        file_content <- tryCatch({
          readLines(entry)
        }, error = function(e) {
          paste("Error reading file:", e)
        })
        folder_structure[[entry_name]] <- paste(file_content, collapse="\n")
      } else {
        folder_structure[[entry_name]] <- NULL
      }
    }
  }
  return(folder_structure)
}

# Folder structure
dir_path <- "/Users/rasools/sdrive/projects/LTS_Frisen/Frisen_gdrive/nbis_frisen_2305"
folder_structure <- get_folder_structure(dir_path, read_files = FALSE)

# Function to interact with ChatGPT and retrieve the response
chat_gpt_interaction <- function(message, api_key, folder_structure = NULL) {
  url <- "https://api.openai.com/v1/chat/completions"
  
  context_message <- if (!is.null(folder_structure)) {
    paste("Here is the folder structure and files:\n", toJSON(folder_structure, pretty = TRUE), "\n\nLet's discuss:")
  } else {
    ""
  }
  
  body <- list(
    model = "gpt-3.5-turbo",
    messages = list(
      list(role = "system", content = context_message),  # Context message here
      list(role = "user", content = message)
    ),
    max_tokens = 150,
    n = 1,
    temperature = 0.7
  )
  
  response <- POST(
    url,
    add_headers("Authorization" = paste("Bearer", api_key), "Content-Type" = "application/json"),
    body = toJSON(body, auto_unbox = TRUE),
    encode = "json"
  )
  
  if (status_code(response) != 200) {
    stop("API request failed with status code ", status_code(response), ": ", content(response, as = "text", encoding = "UTF-8"))
  }
  
  content <- content(response, as = "text", encoding = "UTF-8")
  
  json_content <- fromJSON(content, flatten = TRUE)
  
  if (length(json_content$choices) > 0 && "message.content" %in% colnames(json_content$choices)) {
    response_text <- json_content$choices[1, "message.content"]
    total_tokens <- json_content$usage$total_tokens[1]
  } else {
    stop("Unexpected response format from API")
  }
  
  return(list(response_text = response_text, total_tokens = total_tokens))
}

initial_message <- "Let's discuss the types of data available in the project folder."
message <- initial_message

total_tokens <- 0
continue_chat <- TRUE

# Chat loop
while (continue_chat) {
  cat("You say:\n", message, "\n\n")
  
  response <- chat_gpt_interaction(message, Sys.getenv("OPENAI_API_KEY_NBIS"), folder_structure)
  chat_gpt_response <- response$response_text
  total_tokens <- total_tokens + response$total_tokens
  
  cat("ChatGPT says:\n", chat_gpt_response, "\n\n")
  
  Sys.sleep(1)
  
  message <- readline("Your response (type 'exit' to end chat): ")
  
  if (tolower(message) == "exit") {
    cat("You have chosen to end the chat.\n")
    continue_chat <- FALSE
  } else if (message == "") {
    cat("No input provided. Ending chat.\n")
    continue_chat <- FALSE
  }
}

cat("Total tokens used: ", total_tokens, "\n")
cat("Chat session ended.\n")

```
