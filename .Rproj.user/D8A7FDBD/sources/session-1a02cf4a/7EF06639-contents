library(httr)
library(jsonlite)
library(openxlsx)
library(readxl)

# Function to query OpenAI API
chatGPT <- function(prompt, apiKey, modelName = "gpt-3.5-turbo", temperature = 1) {
  response <- POST(
    url = "https://api.openai.com/v1/chat/completions",
    add_headers(Authorization = paste("Bearer", apiKey)),
    content_type_json(),
    encode = "json",
    body = list(
      model = modelName,
      temperature = temperature,
      messages = list(list(role = "user", content = prompt))
    )
  )
  stop_for_status(response)
  trimws(content(response)$choices[[1]]$message$content)
}


# Read the list of genes from the Excel file
path <- "Ex2/genes.xlsx"  # Replace with the path to your Excel file
genes <- read_excel(path, col_names = TRUE)
genes_list <- as.character(genes[[1]])  # Assumes genes are in the first column

# Initialize a list to store the results
results <- list()

# Loop through each gene and get knockout cell information
for (gene in genes_list) {
  prompt <- paste("What are the reported knockout cells for the gene", gene, "and the titles of the publications?")
  response <- chatGPT(prompt, Sys.getenv("OPENAI_API_KEY_NBIS"))
  results[[gene]] <- response
}

# Write the results back to the Excel file
wb <- createWorkbook()

# Add a sheet
addWorksheet(wb, "Results")

# Write genes to the first column
writeData(wb, "Results", genes_list, startRow = 1, startCol = 1)

# Write responses in the next columns for each gene
for (i in seq_along(genes_list)) {
  gene <- genes_list[i]
  response_lines <- strsplit(results[[gene]], "\n")[[1]]  # Split response into lines
  # Write response in the columns right to the gene
  writeData(wb, "Results", response_lines, startRow = 2, startCol = i + 1)
}

# Save the workbook
saveWorkbook(wb, path, overwrite = TRUE)