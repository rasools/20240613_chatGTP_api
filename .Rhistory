url,
add_headers("Authorization" = paste("Bearer", api_key), "Content-Type" = "application/json"),
body = toJSON(body, auto_unbox = TRUE),
encode = "json"
)
if (status_code(response) != 200) {
stop("API request failed with status code ", status_code(response), ": ", content(response, as = "text", encoding = "UTF-8"))
}
content <- content(response, as = "text", encoding = "UTF-8")
json_content <- fromJSON(content, flatten = TRUE)
if (length(json_content$choices) > 0 && "message.content" %in% colnames(json_content$choices)) {
response_text <- json_content$choices[1, "message.content"]
total_tokens <- json_content$usage$total_tokens[1]
} else {
stop("Unexpected response format from API")
}
return(list(response_text = response_text, total_tokens = total_tokens))
}
# Setup API key from environment for security
api_key <- Sys.getenv("OPENAI_API_KEY_NBIS")
if (api_key == "") {
stop("API key is not set. Please set the OPENAI_API_KEY_NBIS environment variable.")
} else {
cat("Successfully retrieved the API key from environment variable.\n")
}
# Keeps track of the interaction stage
stage <- 1
# Initial messages for the chatbots based on the stages
initial_messages <- list(
"Let's discuss the types of data available in the project folder.",
"Let's discuss the potential analyses that can be performed on the data.",
"Let's discuss what code/scripts should be used for the analyses."
)
# Folder structure for ChatGPT B
dir_path <- "/Users/rasools/sdrive/projects/LTS_Rockberg/Rockberg_gdrive/LTS_Rockberg_2302_gh"  # Replace with your directory path
folder_structure <- get_folder_structure(dir_path, read_files = FALSE)
# Initial message for ChatGPT A
message_a <- initial_messages[[stage]]
message_b <- ""
# Number of exchanges
num_exchanges <- 6  # An even number to ensure fair distribution of stages
# Total tokens used
total_tokens <- 0
# Chat loop
for (i in 1:num_exchanges) {
cat("ChatGPT A says:\n", message_a, "\n\n")
response_a <- chat_gpt_interaction(message_a, api_key)
message_b <- response_a$response_text
total_tokens <- total_tokens + response_a$total_tokens
cat("ChatGPT B says:\n", message_b, "\n\n")
Sys.sleep(1)  # Adding a delay to simulate real-time chatting
response_b <- chat_gpt_interaction(message_b, api_key, folder_structure)
message_a <- response_b$response_text
total_tokens <- total_tokens + response_b$total_tokens
# Transition to the next stage if the discussion for the current stage is complete
if (i %% 2 == 0 && stage < length(initial_messages)) {
stage <- stage + 1
message_a <- initial_messages[[stage]]
cat("\n--- Transition to:", initial_messages[[stage]], " ---\n\n")
}
}
cat("Total tokens used: ", total_tokens, "\n")
library(shiny); runApp('Ex1/svenski_shiny.R')
runApp('Ex1/svenski_shiny.R')
library(httr)
library(jsonlite)
library(openxlsx)
library(readxl)
# Set your OpenAI API Key
api_key <- Sys.getenv("OPENAI_API_KEY_NBIS")
getwd()
# Read the list of genes from the Excel file
path <- "Ex2/genes.xlsx"  # Replace with the path to your Excel file
genes <- read_excel(path, col_names = TRUE)
View(genes)
genes_list <- as.character(colnames(genes))
library(httr)
library(jsonlite)
library(openxlsx)
library(readxl)
# Function to query OpenAI API
chatGPT <- function(prompt, apiKey, modelName = "gpt-3.5-turbo", temperature = 1) {
response <- POST(
url = "https://api.openai.com/v1/chat/completions",
add_headers(Authorization = paste("Bearer", apiKey)),
content_type_json(),
encode = "json",
body = list(
model = modelName,
temperature = temperature,
messages = list(list(role = "user", content = prompt))
)
)
stop_for_status(response)
trimws(content(response)$choices[[1]]$message$content)
}
# Set your OpenAI API Key
api_key <- Sys.getenv("OPENAI_API_KEY_NBIS")
# Read the list of genes from the Excel file
path <- "Ex2/genes.xlsx"  # Replace with the path to your Excel file
genes <- read_excel(path, col_names = TRUE)
genes_list <- as.character(colnames(genes))
# Initialize a list to store the results
results <- list()
# Loop through each gene and get knockout cell information
for (gene in genes_list) {
prompt <- paste("What are the reported knockout cells for the gene", gene, "and the titles of the publications?")
response <- chatGPT(prompt, api_key)
results[[gene]] <- response
}
# Function to query OpenAI API
chatGPT <- function(prompt, apiKey, modelName = "gpt-3.5-turbo", temperature = 1) {
response <- POST(
url = "https://api.openai.com/v1/chat/completions",
add_headers(Authorization = paste("Bearer", apiKey)),
content_type_json(),
encode = "json",
body = list(
model = modelName,
temperature = temperature,
messages = list(list(role = "user", content = prompt))
)
)
stop_for_status(response)
trimws(content(response)$choices[[1]]$message$content)
}
# Set your OpenAI API Key
api_key <- Sys.getenv("OPENAI_API_KEY_NBIS")
# Read the list of genes from the Excel file
path <- "Ex2/genes.xlsx"  # Replace with the path to your Excel file
genes <- read_excel(path, col_names = TRUE)
genes_list <- as.character(colnames(genes))
library(httr)
library(jsonlite)
# Function to list the folder structure and optionally read file contents
get_folder_structure <- function(dir_path, read_files = FALSE) {
folder_structure <- list()
files_and_dirs <- list.files(dir_path, full.names = TRUE)
for (entry in files_and_dirs) {
entry_name <- basename(entry)
if (file.info(entry)$isdir) {
folder_structure[[entry_name]] <- get_folder_structure(entry, read_files)
} else {
if (read_files) {
file_content <- tryCatch({
readLines(entry)
}, error = function(e) {
paste("Error reading file:", e)
})
folder_structure[[entry_name]] <- paste(file_content, collapse="\n")
} else {
folder_structure[[entry_name]] <- NULL
}
}
}
return(folder_structure)
}
# Function to interact with ChatGPT and retrieve the response
chat_gpt_interaction <- function(message, api_key, folder_structure = NULL) {
url <- "https://api.openai.com/v1/chat/completions"
context_message <- if (!is.null(folder_structure)) {
paste("Here is the folder structure and files:\n", toJSON(folder_structure, pretty = TRUE), "\n\nLet's discuss:")
} else {
""
}
body <- list(
model = "gpt-3.5-turbo",
messages = list(
list(role = "user", content = message),
list(role = "system", content = context_message)  # Context message here
),
max_tokens = 150,
n = 1,
temperature = 0.7
)
response <- POST(
url,
add_headers("Authorization" = paste("Bearer", api_key), "Content-Type" = "application/json"),
body = toJSON(body, auto_unbox = TRUE),
encode = "json"
)
if (status_code(response) != 200) {
stop("API request failed with status code ", status_code(response), ": ", content(response, as = "text", encoding = "UTF-8"))
}
content <- content(response, as = "text", encoding = "UTF-8")
json_content <- fromJSON(content, flatten = TRUE)
if (length(json_content$choices) > 0 && "message.content" %in% colnames(json_content$choices)) {
response_text <- json_content$choices[1, "message.content"]
total_tokens <- json_content$usage$total_tokens[1]
} else {
stop("Unexpected response format from API")
}
return(list(response_text = response_text, total_tokens = total_tokens))
}
# Setup API key from environment for security
api_key <- Sys.getenv("OPENAI_API_KEY_NBIS")
if (api_key == "") {
stop("API key is not set. Please set the OPENAI_API_KEY_NBIS environment variable.")
} else {
cat("Successfully retrieved the API key from environment variable.\n")
}
library(httr)
library(jsonlite)
library(openxlsx)
library(readxl)
# Function to query OpenAI API
chatGPT <- function(prompt, apiKey, modelName = "gpt-3.5-turbo", temperature = 1) {
response <- POST(
url = "https://api.openai.com/v1/chat/completions",
add_headers(Authorization = paste("Bearer", apiKey)),
content_type_json(),
encode = "json",
body = list(
model = modelName,
temperature = temperature,
messages = list(list(role = "user", content = prompt))
)
)
stop_for_status(response)
trimws(content(response)$choices[[1]]$message$content)
}
# Set your OpenAI API Key
api_key <- Sys.getenv("OPENAI_API_KEY_NBIS")
# Read the list of genes from the Excel file
path <- "Ex2/genes.xlsx"  # Replace with the path to your Excel file
genes <- read_excel(path, col_names = TRUE)
genes_list <- as.character(colnames(genes))
# Initialize a list to store the results
results <- list()
# Loop through each gene and get knockout cell information
for (gene in genes_list) {
prompt <- paste("What are the reported knockout cells for the gene", gene, "and the titles of the publications?")
response <- chatGPT(prompt, api_key)
results[[gene]] <- response
}
# Write the results back to the Excel file
wb <- createWorkbook()
# Add a sheet
addWorksheet(wb, "Results")
# Write genes to the first row
writeData(wb, "Results", genes_list, startRow = 1, startCol = 1)
# Write responses under each gene
for (i in seq_along(genes_list)) {
gene <- genes_list[i]
response_lines <- strsplit(results[[gene]], "\n")[[1]]
writeData(wb, "Results", response_lines, startRow = 2, startCol = i)
}
# Save the workbook
saveWorkbook(wb, path, overwrite = TRUE)
# Read the list of genes from the Excel file
path <- "Ex2/genes.xlsx"  # Replace with the path to your Excel file
genes <- read_excel(path, col_names = FALSE)
View(genes)
# Read the list of genes from the Excel file
path <- "Ex2/genes.xlsx"  # Replace with the path to your Excel file
genes <- read_excel(path, col_names = FALSE)
genes <- read_excel(path, col_names = FALSE)
View(genes)
genes <- read_excel(path, col_names = TRUE)
genes_list <- as.character(genes$genes)
View(genes)
# Initialize a list to store the results
results <- list()
library(httr)
library(jsonlite)
library(openxlsx)
library(readxl)
# Function to query OpenAI API
chatGPT <- function(prompt, apiKey, modelName = "gpt-3.5-turbo", temperature = 1) {
response <- POST(
url = "https://api.openai.com/v1/chat/completions",
add_headers(Authorization = paste("Bearer", apiKey)),
content_type_json(),
encode = "json",
body = list(
model = modelName,
temperature = temperature,
messages = list(list(role = "user", content = prompt))
)
)
stop_for_status(response)
trimws(content(response)$choices[[1]]$message$content)
}
# Set your OpenAI API Key
api_key <- Sys.getenv("OPENAI_API_KEY_NBIS")
# Read the list of genes from the Excel file
path <- "Ex2/genes.xlsx"  # Replace with the path to your Excel file
genes <- read_excel(path, col_names = TRUE)
genes_list <- as.character(genes[[1]])  # Assumes genes are in the first column
# Initialize a list to store the results
results <- list()
# Loop through each gene and get knockout cell information
for (gene in genes_list) {
prompt <- paste("What are the reported knockout cells for the gene", gene, "and the titles of the publications?")
response <- chatGPT(prompt, api_key)
results[[gene]] <- response
}
# Write the results back to the Excel file
wb <- createWorkbook()
# Add a sheet
addWorksheet(wb, "Results")
# Write genes to the first column
writeData(wb, "Results", genes_list, startRow = 1, startCol = 1)
# Write responses in the next columns for each gene
for (i in seq_along(genes_list)) {
gene <- genes_list[i]
response_lines <- strsplit(results[[gene]], "\n")[[1]]  # Split response into lines
# Write response in the columns right to the gene
writeData(wb, "Results", response_lines, startRow = 2, startCol = i + 1)
}
# Save the workbook
saveWorkbook(wb, path, overwrite = TRUE)
library(httr)
library(jsonlite)
library(openxlsx)
library(readxl)
# Function to query OpenAI API
chatGPT <- function(prompt, apiKey, modelName = "gpt-3.5-turbo", temperature = 1) {
response <- POST(
url = "https://api.openai.com/v1/completions",
add_headers(Authorization = paste("Bearer", apiKey)),
content_type_json(),
encode = "json",
body = list(
model = modelName,
temperature = temperature,
max_tokens = 150,
prompt = prompt
)
)
stop_for_status(response)
content(response)$choices[[1]]$text
}
# Read the list of genes from the Excel file
path <- "Ex2/genes.xlsx"
genes_df <- read_excel(path)
getwd()
library(httr)
library(jsonlite)
library(openxlsx)
library(readxl)
# Function to query OpenAI API
chatGPT <- function(prompt, apiKey, modelName = "gpt-3.5-turbo", temperature = 1) {
response <- POST(
url = "https://api.openai.com/v1/chat/completions",
add_headers(Authorization = paste("Bearer", apiKey)),
content_type_json(),
encode = "json",
body = list(
model = modelName,
temperature = temperature,
messages = list(list(role = "user", content = prompt))
)
)
stop_for_status(response)
trimws(content(response)$choices[[1]]$message$content)
}
# Set your OpenAI API Key
api_key <- Sys.getenv("OPENAI_API_KEY_NBIS")
# Read the list of genes from the Excel file
path <- "genes.xlsx"  # Replace with the path to your Excel file
genes <- read_excel(path, col_names = TRUE)
genes_list <- as.character(genes[[1]])  # Assumes genes are in the first column
# Initialize a list to store the results
results <- list()
# Loop through each gene and get knockout cell information
for (gene in genes_list) {
prompt <- paste("What are the reported knockout cells for the gene", gene, "and the titles of the publications?")
response <- chatGPT(prompt, Sys.getenv("OPENAI_API_KEY_NBIS"))
results[[gene]] <- response
}
# Write the results back to the Excel file
wb <- createWorkbook()
# Add a sheet
addWorksheet(wb, "Results")
# Write genes to the first column
writeData(wb, "Results", genes_list, startRow = 1, startCol = 1)
# Write responses in the next columns for each gene
for (i in seq_along(genes_list)) {
gene <- genes_list[i]
response_lines <- strsplit(results[[gene]], "\n")[[1]]  # Split response into lines
# Write response in the columns right to the gene
writeData(wb, "Results", response_lines, startRow = 2, startCol = i + 1)
}
library(httr)
library(jsonlite)
library(openxlsx)
library(readxl)
# Function to query OpenAI API
chatGPT <- function(prompt, apiKey, modelName = "gpt-3.5-turbo", temperature = 1) {
response <- POST(
url = "https://api.openai.com/v1/completions",
add_headers(Authorization = paste("Bearer", apiKey)),
content_type_json(),
encode = "json",
body = list(
model = modelName,
temperature = temperature,
max_tokens = 150,
prompt = prompt
)
)
stop_for_status(response)
content(response)$choices[[1]]$text
}
# Read the list of genes from the Excel file
path <- "Ex2/genes.xlsx"
genes_df <- read_excel(path)
library(httr)
library(jsonlite)
library(openxlsx)
library(readxl)
# Function to query OpenAI API
chatGPT <- function(prompt, apiKey, modelName = "gpt-3.5-turbo", temperature = 1) {
response <- POST(
url = "https://api.openai.com/v1/completions",
add_headers(Authorization = paste("Bearer", apiKey)),
content_type_json(),
encode = "json",
body = list(
model = modelName,
temperature = temperature,
max_tokens = 150,
prompt = prompt
)
)
stop_for_status(response)
content(response)$choices[[1]]$text
}
# Read the list of genes from the Excel file
path <- "genes.xlsx"
genes_df <- read_excel(path)
genes_list <- genes_df$genes  # Assuming 'genes' is the header for the first column
# Initialize a list to store the results
results <- vector("list", length(genes_list))
names(results) <- genes_list
# Loop through each gene and get knockout cell information
for (gene in genes_list) {
prompt <- paste("List reported knockout cells for the gene", gene, "and the titles of the publications.")
response <- chatGPT(prompt, Sys.getenv("OPENAI_API_KEY_NBIS"))
results[[gene]] <- response
Sys.sleep(1)  # To prevent rate limiting
}
library(httr)
library(jsonlite)
library(openxlsx)
library(readxl)
# Function to query OpenAI API
chatGPT <- function(prompt, apiKey, modelName = "gpt-3.5-turbo", temperature = 1) {
response <- POST(
url = "https://api.openai.com/v1/completions",
add_headers(Authorization = paste("Bearer", apiKey)),
content_type_json(),
encode = "json",
body = list(
model = modelName,
temperature = temperature,
max_tokens = 150,
prompt = prompt
)
)
stop_for_status(response)
content(response)$choices[[1]]$text
}
# Read the list of genes from the Excel file
path <- "genes.xlsx"
genes_df <- read_excel(path)
genes_list <- genes_df$genes  # Assuming 'genes' is the header for the first column
# Initialize a list to store the results
results <- vector("list", length(genes_list))
names(results) <- genes_list
# Loop through each gene and get knockout cell information
for (gene in genes_list) {
prompt <- paste("List reported knockout cells for the gene", gene, "and the titles of the publications.")
response <- chatGPT(prompt, Sys.getenv("OPENAI_API_KEY_NBIS"))
results[[gene]] <- response
Sys.sleep(1)  # To prevent rate limiting
}
Sys.getenv("OPENAI_API_KEY_NBIS"
)
# Function to query OpenAI API
chatGPT <- function(prompt, apiKey, modelName = "gpt-3.5-turbo", temperature = 1) {
response <- POST(
url = "https://api.openai.com/v1/completions",
add_headers(Authorization = paste("Bearer", apiKey)),
content_type_json(),
encode = "json",
body = list(
model = modelName,
temperature = temperature,
max_tokens = 150,
prompt = prompt
)
)
stop_for_status(response)
content(response)$choices[[1]]$text
}
# Read the list of genes from the Excel file
path <- "Ex2/genes.xlsx"
genes_df <- read_excel(path)
genes_list <- genes_df$genes  # Assuming 'genes' is the header for the first column
# Initialize a list to store the results
results <- vector("list", length(genes_list))
names(results) <- genes_list
# Loop through each gene and get knockout cell information
for (gene in genes_list) {
prompt <- paste("List reported knockout cells for the gene", gene, "and the titles of the publications.")
response <- chatGPT(prompt, Sys.getenv("OPENAI_API_KEY_NBIS"))
results[[gene]] <- response
Sys.sleep(1)  # To prevent rate limiting
}
Sys.getenv("OPENAI_API_KEY_NBIS")
